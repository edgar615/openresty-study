worker_processes  1;        #nginx worker 数量
error_log logs/error.log;   #指定错误日志文件路径
events {
    worker_connections 1024;
}

http {
    server {
        #监听端口，若你的6699端口已经被占用，则需要修改
        listen 6699;
        #流水线方式跳转
        #现在的网络请求，已经变得越来越拥挤。
        #各种不同 API 、下载请求混杂在一起，就要求不同厂商对下载的动态调整有各种不同的定制策略，而这些策略在一天的不同时间段，规则可能还不一样。
        #这时候我们还可以效仿工厂的流水线模式，逐层过滤、处理。
        location ~ ^/static/([-_a-zA-Z0-9/]+).jpg {
            set $image_name $1;
            content_by_lua_block {
                --ngx.exec 方法与 ngx.redirect 是完全不同的，前者是个纯粹的内部跳转并且没有引入任何额外 HTTP 信号。 这里的两个 location 更像是流水线上工人之间的协作关系。
                --第一环节的工人对完成自己处理部分后，直接交给第二环节处理人（实际上可以有更多环节），它们之间的数据流是定向的
                ngx.exec("/download_internal/images/"
                        .. ngx.var.image_name .. ".jpg");
            }
        }
        location /download_internal {
            internal;
            # 这里还可以有其他统一的 download 下载设置，例如限速等
            #alias ../download;
            content_by_lua_block {
                ngx.say("download_internal")
            }
        }
    }
}