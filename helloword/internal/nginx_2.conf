worker_processes  1;        #nginx worker 数量
error_log logs/error.log;   #指定错误日志文件路径
events {
    worker_connections 1024;
}

http {
    server {
        #监听端口，若你的6699端口已经被占用，则需要修改
        listen 6699;
        #例如对数据库、内部公共函数的统一接口，可以把它们放到统一的 location 中。
        #通常情况下，为了保护这些内部接口，都会把这些接口设置为 internal 。
        #这么做的最主要好处就是可以让这个内部接口相对独立，不受外界干扰
        location /sum {
            #只允许内部调用
            internal;
            # 这里做了一个求和运算只是一个例子，可以在这里完成一些数据库、
            # 缓存服务器的操作，达到基础模块和业务逻辑分离目的

            content_by_lua_block {
                --为了测试并行，增加sleep方法
                ngx.sleep(0.1)
                local args = ngx.req.get_uri_args()
                ngx.print(tonumber(args.a) + tonumber(args.b))
            }
        }
        location /sub {
            internal;
            content_by_lua_block {
                ngx.sleep(0.1)
                local args = ngx.req.get_uri_args()
                ngx.print(tonumber(args.a) - tonumber(args.b))
            }
        }
        location /app/test_parallels {
            content_by_lua_block {
                local start_time = ngx.now()
                --利用 ngx.location.capture_multi 函数，直接完成了两个子请求并行执行。当两个请求没有相互依赖，这种方法可以极大提高查询效率
                local res1, res2 = ngx.location.capture_multi( {
                                {"/sum", {args={a=3, b=8}}},
                                {"/sub", {args={a=3, b=8}}}
                            })
                ngx.say("status:", res1.status, " response:", res1.body)
                ngx.say("status:", res2.status, " response:", res2.body)
                ngx.say("time used:", ngx.now() - start_time)
            }
        }
        location /app/test_queue {
            content_by_lua_block {
                local start_time = ngx.now()
                local res1 = ngx.location.capture_multi( {{"/sum", {args={a=3, b=8}}}})
                local res2 = ngx.location.capture_multi( {{"/sub", {args={a=3, b=8}}}})
                ngx.say("status:", res1.status, " response:", res1.body)
                ngx.say("status:", res2.status, " response:", res2.body)
                ngx.say("time used:", ngx.now() - start_time)
            }
        }

    }
}