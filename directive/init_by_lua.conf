worker_processes  1;        #nginx worker 数量
error_log logs/error.log info;   #日志级别
events {
    worker_connections 1024;
}

http {

    #是否开启default_type,默认开启
    #lua_use_default_type
    #设置默认lua搜索路径
    lua_package_path 'lua/?.lua;/blah/?.lua;;';

    #lua_package_cpath

    #关闭lua代码的cache，不必每次都重新加载nginx，生产环境不要这么做
    lua_code_cache off;

    #nginx重新加载之后就会执行一次init_by_lua
    #如果关闭lua_code_cache，那么每次请求也都会执行一次init_by_lua,因为每次请求会创建lua vm
    #通常init_by_lua用来声明lua的全局变量和需要预先加载对LUA模块
    #init_by_lua 'cjson = require "cjson"';
    #在location中可以使用ngx.say(cjson.encode({dog = 5, cat = 6}))

    #一般不再这个指令里声明自己的全局变量，因为会有性能损失或全局命名空间污染

    #这个指令的上下文里只支持下面的API
    #Logging APIs: ngx.log and print,
    #Shared Dictionary API: ngx.shared.DICT.

    #Declares a shared memory zone, <name>, to serve as storage for the shm based Lua dictionary ngx.shared.<name>.
    #The <size> argument accepts size units such as k and m:
     lua_shared_dict dogs 1m;
     init_by_lua '
          print("****************init_by_lua*****************")
          local dogs = ngx.shared.dogs;
          dogs:set("Tom", 56)
      ';

    server {
        #监听端口，若你的6699端口已经被占用，则需要修改
        listen 6699;

        # 在代码路径中使用nginx变量
        # 注意： nginx var 的变量一定要谨慎，否则将会带来非常大的风险
        location / {
            content_by_lua '
                local dogs = ngx.shared.dogs;
                ngx.say(dogs:get("Tom"))
            ';
        }
    }
}