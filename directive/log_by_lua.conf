worker_processes  1;        #nginx worker 数量
error_log logs/error.log info;   #日志级别
events {
    worker_connections 1024;
}

http {

    #是否开启default_type,默认开启
    #lua_use_default_type
    #设置默认lua搜索路径
    lua_package_path 'lua/?.lua;/blah/?.lua;;';

    #关闭lua代码的cache，不必每次都重新加载nginx，生产环境不要这么做
    lua_code_cache off;

    lua_shared_dict log_dict 5M;

    #log阶段处理，比如记录访问量/统计平均响应时间
    server {
        #监听端口，若你的6699端口已经被占用，则需要修改
        listen 6699;

       location / {
                proxy_pass http://test.ihorn.com.cn:9000/registercode;

                log_by_lua '
                    local log_dict = ngx.shared.log_dict
                    local upstream_time = tonumber(ngx.var.upstream_response_time)

                    local sum = log_dict:get("upstream_time-sum") or 0
                    sum = sum + upstream_time
                    log_dict:set("upstream_time-sum", sum)

                    local newval, err = log_dict:incr("upstream_time-nb", 1)
                    if not newval and err == "not found" then
                        log_dict:add("upstream_time-nb", 0)
                        log_dict:incr("upstream_time-nb", 1)
                    end
                ';
            }

            location = /status {
                content_by_lua '
                    local log_dict = ngx.shared.log_dict
                    local sum = log_dict:get("upstream_time-sum")
                    local nb = log_dict:get("upstream_time-nb")

                    if nb and sum then
                        ngx.say("average upstream response time: ", sum / nb,
                                " (", nb, " reqs)")
                    else
                        ngx.say("no data yet")
                    end
                ';
            }

    }
}