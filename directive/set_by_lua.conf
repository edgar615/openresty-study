worker_processes  1;        #nginx worker 数量
error_log logs/error.log info;   #日志级别
events {
    worker_connections 1024;
}

http {

    #是否开启default_type,默认开启
    #lua_use_default_type
    #设置默认lua搜索路径
    lua_package_path 'lua/?.lua;/blah/?.lua;;';

    #关闭lua代码的cache，不必每次都重新加载nginx，生产环境不要这么做
    lua_code_cache off;

    server {
        #监听端口，若你的6699端口已经被占用，则需要修改
        listen 6699;

        location / {
            set $diff '';

            #设置nginx变量，可以实现复杂的赋值逻辑；此处是阻塞的，Lua代码要做到非常快
            #set_by_lua $res <lua-script-str> [$arg1 $arg2 ...]
            #尽量不要堵塞该指令
            #下面对方法禁止使用
            #Output API functions (e.g., ngx.say and ngx.send_headers)
            #Control API functions (e.g., ngx.exit)
            #Subrequest API functions (e.g., ngx.location.capture and ngx.location.capture_multi)
            #Cosocket API functions (e.g., ngx.socket.tcp and ngx.req.socket).
            #Sleeping API function ngx.sleep.

            set_by_lua $sum '
                local a = ngx.arg[1]
                local b = ngx.arg[2]

                ngx.var.diff = a - b
                return a + b
            ' 32 56;
            echo "sum = $sum, diff = $diff";
            content_by_lua_block {
                ngx.say("sum = ", ngx.var.sum," diff = ", ngx.var.diff)
            }
        }

        location /foo {
            set $foo 32;
            set_by_lua $bar 'return tonumber(ngx.var.foo) + 1';
            set $baz "bar: $bar";
            content_by_lua_block {
                ngx.say("foo = ", ngx.var.foo," bar = ", ngx.var.bar)
            }
        }
    }
}