worker_processes  1;        #nginx worker 数量
error_log logs/error.log info;   #日志级别
events {
    worker_connections 1024;
}

http {

    #是否开启default_type,默认开启
    #lua_use_default_type
    #设置默认lua搜索路径
    lua_package_path 'lua/?.lua;/blah/?.lua;;';

    #关闭lua代码的cache，不必每次都重新加载nginx，生产环境不要这么做
    lua_code_cache off;

    server {
        #监听端口，若你的6699端口已经被占用，则需要修改
        listen 6699;

        #body_filter_by_lua对响应数据进行过滤，比如截断、替换。
        #所有对响应数据保存再ngx.arg[1]参数中,
        #ngx.arg[2]表示响应数据对结束标记(bool类型)

        #将ngx.arg[1]设为nil或者空字符串，不会有数据块向下传播

        #The Lua code can pass its own modified version of the input data chunk to the downstream Nginx output body filters by overriding ngx.arg[1] with a Lua string or a Lua table of strings.

         location / {
              proxy_pass http://test.ihorn.com.cn:9000/registercode;
              body_filter_by_lua '
                print(ngx.arg[1])
                print(ngx.arg[2])
                ngx.arg[1] = string.upper(ngx.arg[1])
              ';
          }

           #curl -i localhost:6699/t会直接返回hello world，因为gx.arg[2] = true已经将请求截断
           location /t {
               echo hello world;
               echo hiya globe;

               body_filter_by_lua '
                   local chunk = ngx.arg[1]
                   if string.match(chunk, "hello") then
                       ngx.arg[2] = true  -- new eof
                       return
                   end

                   -- just throw away any remaining chunk data
                   ngx.arg[1] = nil
               ';
           }
           #When the Lua code may change the length of the response body, then it is required to always clear out the Content-Length response header (if any) in a header filter to enforce streaming output
            location /foo {
                # fastcgi_pass/proxy_pass/...

                header_filter_by_lua 'ngx.header.content_length = nil';
                body_filter_by_lua 'ngx.arg[1] = string.len(ngx.arg[1]) .. "\\n"';
            }
    }
}