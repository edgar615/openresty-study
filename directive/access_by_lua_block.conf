worker_processes  1;        #nginx worker 数量
error_log logs/error.log info;   #日志级别
events {
    worker_connections 1024;
}

http {

    #是否开启default_type,默认开启
    #lua_use_default_type
    #设置默认lua搜索路径
    lua_package_path 'lua/?.lua;/blah/?.lua;;';

    #关闭lua代码的cache，不必每次都重新加载nginx，生产环境不要这么做
    lua_code_cache off;

    server {
        #监听端口，若你的6699端口已经被占用，则需要修改
        listen 6699;

         location / {
             deny    192.168.1.1;
             allow   192.168.1.0/24;
             allow   10.1.1.0/16;
             deny    all;

            # if a client IP address is in the blacklist, it will be denied before the MySQL query for more complex authentication is executed by access_by_lua.
             access_by_lua '
                 local res = ngx.location.capture("/mysql", { })
             ';
         }
         location /foo {
              access_by_lua_block {
                  local res = ngx.location.capture("/auth")

                  --继续向下执行handler
                  if res.status == ngx.HTTP_OK then
                      return
                  end

                  if res.status == ngx.HTTP_FORBIDDEN then
                      ngx.exit(res.status)
                  end

                  ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
              }
              content_by_lua_block {
                ngx.say("foo")
              }
          }
         location /auth {
            content_by_lua_block {
                ngx.say("ok")
            }
         }
    }
}