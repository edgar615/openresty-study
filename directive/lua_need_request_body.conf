worker_processes  1;        #nginx worker 数量
error_log logs/error.log;   #指定错误日志文件路径
events {
    worker_connections 1024;
}

http {
    server {
        #监听端口，若你的6699端口已经被占用，则需要修改
        listen 6699;

        #Determines whether to force the request body data to be read before running rewrite/access/access_by_lua* or not.
        #The Nginx core does not read the client request body by default and if request body data is required, then this directive should be turned on or the ngx.req.read_body function should be called within the Lua code.
        lua_need_request_body on;


        #To read the request body data within the $request_body variable, client_body_buffer_size must have the same value as client_max_body_size.
        #Because when the content length exceeds client_body_buffer_size but less than client_max_body_size, Nginx will buffer the data into a temporary file on the disk, which will lead to empty value in the $request_body variable.

        #If the current location includes rewrite_by_lua or rewrite_by_lua_file directives, then the request body will be read just before the rewrite_by_lua or rewrite_by_lua_file code is run (and also at the rewrite phase). Similarly, if only content_by_lua is specified, the request body will not be read until the content handler's Lua code is about to run (i.e., the request body will be read during the content phase).

        #It is recommended however, to use the ngx.req.read_body and ngx.req.discard_body functions for finer control over the request body reading process instead.

        #This also applies to access_by_lua and access_by_lua_file.

        #curl -i -X POST --url 'localhost:6699/test' --data 'abcd'
        location /test {
            content_by_lua_block {
                --如果你只是某个接口需要读取 body（并非全局行为），那么这时候也可以显示调用 ngx.req.read_body() 接口，不需要开启lua_need_request_body
                local data = ngx.req.get_body_data()
                ngx.say("hello", data)
            }
        }
    }
}