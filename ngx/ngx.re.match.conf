worker_processes  1;        #nginx worker 数量
error_log logs/error.log error;   #日志级别
events {
    worker_connections 1024;
}

http {
    server {
        listen 6699;

         location / {
             content_by_lua_block {

                   --When a match is found, a Lua table captures is returned, where captures[0] holds the whole substring being matched, and captures[1] holds the first parenthesized sub-pattern's capturing, captures[2] the second, and so
                   local m, err = ngx.re.match("hello, 1234", "[0-9]+")
                   if m then
                       -- m[0] == "1234"
                       ngx.say(m[0])

                   else
                       if err then
                           ngx.log(ngx.ERR, "error: ", err)
                           return
                       end

                       ngx.say("match not found")
                   end

                   local m, err = ngx.re.match("hello, 1234", "([0-9])[0-9]+")
                   -- m[0] == "1234"
                    -- m[1] == "1"
                   ngx.say(m[0])
                   ngx.say(m[1])

                   --Named captures are also supported since the v0.7.14 release and are returned in the same Lua table as key-value pairs as the numbered captures.
                    local m, err = ngx.re.match("hello, 1234", "([0-9])(?<remaining>[0-9]+)")
                    -- m[0] == "1234"
                    -- m[1] == "1"
                    -- m[2] == "234"
                    -- m["remaining"] == "234"
                    ngx.say(m[0])
                    ngx.say(m[1])
                    ngx.say(m[2])

                    --Unmatched subpatterns will have false values in their captures table fields.
                    local m, err = ngx.re.match("hello, world", "(world)|(hello)|(?<named>howdy)")
                     -- m[0] == "hello"
                     -- m[1] == false
                     -- m[2] == "hello"
                     -- m[3] == false
                     -- m["named"] == false
                     ngx.say(m[0])
                     ngx.say(m[1])
                     ngx.say(m[2])
                     ngx.say(m[3])
                     ngx.say(m["named"])

             }
         }
    }
}