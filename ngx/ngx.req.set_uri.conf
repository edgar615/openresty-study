worker_processes  1;        #nginx worker 数量
error_log logs/error.log error;   #日志级别
events {
    worker_connections 1024;
}

http {
    server {
        listen 6699;

        #curl localhost:6699
        #foo
         location / {
            rewrite_by_lua_block {
            --Rewrite the current request's (parsed) URI by the uri argument. The uri argument must be a Lua string and cannot be of zero length, or a Lua exception will be thrown.

            --The optional boolean jump argument can trigger location rematch (or location jump) as ngx_http_rewrite_module's rewrite directive, that is, when jump is true (default to false), this function will never return and it will tell Nginx to try re-searching locations with the new URI value at the later post-rewrite phase and jumping to the new location.

           --Location jump will not be triggered otherwise, and only the current request's URI will be modified, which is also the default behavior. This function will return but with no returned values when the jump argument is false or absent altogether.
                ngx.req.set_uri("/foo", true) --等同于 rewrite ^ /foo last;
             }

             content_by_lua_block {
                -- post
                ngx.say("index")

             }
         }

         location /foo {
            content_by_lua '
                ngx.say("foo")
            ';
         }

         location /index {
             rewrite_by_lua_block {
                 ngx.req.set_uri("/foo", false) --等同于 rewrite ^ /foo break;
              }

              content_by_lua_block {
                 -- post
                 ngx.say("index")

              }
          }

          location /foo {
             content_by_lua '
                 ngx.say("foo")
             ';
          }

           location /test {
               rewrite_by_lua '
                   local uri = ngx.re.sub(ngx.var.uri, "^/test/(.*)", "/$1", "o")
                   ngx.req.set_uri(uri)
               ';
               proxy_pass http://my_backend;
           }
           #等同于
            location /test2 {
                rewrite ^/test/(.*) /$1 break;
                proxy_pass http://my_backend;
            }
            #rewrite ^ /foo?a=3? last;
            #等同于
            #ngx.req.set_uri_args("a=3")
            #ngx.req.set_uri("/foo", true)
            #或者
            #ngx.req.set_uri_args({a = 3})
            #ngx.req.set_uri("/foo", true)

    }
}