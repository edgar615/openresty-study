worker_processes  1;        #nginx worker 数量
error_log logs/error.log error;   #日志级别
events {
    worker_connections 1024;
}

http {
    server {
        #监听端口，若你的6699端口已经被占用，则需要修改
        listen 6699;

        #$arg_<name> 	请求中的name参数
        #$args 	请求中的参数
        #$binary_remote_addr 	远程地址的二进制表示
        #$body_bytes_sent 	已发送的消息体字节数
        #$content_length 	HTTP请求信息里的"Content-Length"
        #$content_type 	请求信息里的"Content-Type"
        #$document_root 	针对当前请求的根路径设置值
        #$document_uri 	与$uri相同; 比如 /test2/test.php
        #$host 	请求信息中的"Host"，如果请求中没有Host行，则等于设置的服务器名
        #$hostname 	机器名使用 gethostname系统调用的值
        #$http_cookie 	cookie 信息
        #$http_referer 	引用地址
        #$http_user_agent 	客户端代理信息
        #$http_via 	最后一个访问服务器的Ip地址。
        #$http_x_forwarded_for 	相当于网络访问路径
        #$is_args 	如果请求行带有参数，返回“?”，否则返回空字符串
        #$limit_rate 	对连接速率的限制
        #$nginx_version 	当前运行的nginx版本号
        #$pid 	worker进程的PID
        #$query_string 	与$args相同
        #$realpath_root 	按root指令或alias指令算出的当前请求的绝对路径。其中的符号链接都会解析成真是文件路径
        #$remote_addr 	客户端IP地址
        #$remote_port 	客户端端口号
        #$remote_user 	客户端用户名，认证用
        #$request 	用户请求
        #$request_body 	这个变量（0.7.58+）包含请求的主要信息。在使用proxy_pass或fastcgi_pass指令的location中比较有意义
        #$request_body_file 	客户端请求主体信息的临时文件名
        #$request_completion 	如果请求成功，设为"OK"；如果请求未完成或者不是一系列请求中最后一部分则设为空
        #$request_filename 	当前请求的文件路径名，比如/opt/nginx/www/test.php
        #$request_method 	请求的方法，比如"GET"、"POST"等
        #$request_uri 	请求的URI，带参数
        #$scheme 	所用的协议，比如http或者是https
        #$server_addr 	服务器地址，如果没有用listen指明服务器地址，使用这个变量将发起一次系统调用以取得地址(造成资源浪费)
        #$server_name 	请求到达的服务器名
        #$server_port 	请求到达的服务器端口号
        #$server_protocol 	请求的协议版本，"HTTP/1.0"或"HTTP/1.1"
        #$uri 	请求的URI，可能和最初的值有不同，比如经过重定向之类的

        location / {
            content_by_lua_block {
                ngx.say("请求的URI,$uri->", ngx.var.uri)
                ngx.say("请求的协议版本,$server_protocol->", ngx.var.server_protocol)
                ngx.say("请求到达的服务器端口号,$server_port->", ngx.var.server_port)
                ngx.say("请求到达的服务器名,$server_name->", ngx.var.server_name)
                ngx.say("服务器地址,$server_addr->", ngx.var.server_addr)
                ngx.say("所用的协议,$scheme->", ngx.var.scheme)
                ngx.say("所用的协议,$request_uri->", ngx.var.request_uri)
                ngx.say("所用的协议,$request_method->", ngx.var.request_method)
                ngx.say("当前请求的文件路径名,$request_filename->", ngx.var.request_filename)
                ngx.say("请求中的参数,$query_string->", ngx.var.query_string)
                ngx.say("对连接速率的限制,$limit_rate->", ngx.var.limit_rate)
                ngx.say("如果请求行带有参数，返回“?”，否则返回空字符串,$is_args->", ngx.var.is_args)
                ngx.say("$content_type->", ngx.var.content_type)
                ngx.say("$content_length->", ngx.var.content_length)
                ngx.say("客户端IP地址,$remote_addr->", ngx.var.remote_addr)
                ngx.say("请求中的参数,$args->", ngx.var.args)
                --ngx.say("请求中的参数,$arg_name->", ngx.var.arg_name)
                ngx.say("请求中的参数,$arg_a->", ngx.var.arg_a)

            }
        }
    }
}