worker_processes  1;        #nginx worker 数量
error_log logs/error.log error;   #日志级别
events {
    worker_connections 1024;
}

#Nginx 子请求是一种非常强有力的方式，它可以发起非阻塞的内部请求访问目标 location。
#目标 location 可以是配置文件中其他文件目录，或 任何 其他 nginx C 模块，包括 ngx_proxy、ngx_fastcgi、ngx_memc、ngx_postgres、ngx_drizzle，甚至 ngx_lua 自身等等 。

#需要注意的是，子请求只是模拟 HTTP 接口的形式， 没有 额外的 HTTP/TCP 流量，也 没有 IPC (进程间通信) 调用。所有工作在内部高效地在 C 语言级别完成。
#在发起子请求前，用户程序应总是读取完整的 HTTP 请求体 (通过调用 ngx.req.read_body 或设置 lua_need_request_body 指令为 on).
#该 API 方法（ngx.location.capture_multi 也一样）总是缓冲整个请求体到内存中。
#因此，当需要处理一个大的子请求响应，用户程序应使用 cosockets 进行流式处理

http {
    server {
        #监听端口，若你的6699端口已经被占用，则需要修改
        listen 6699;

        location / {
            #access_by_lua_block {
            #    local black_ips = {["127.0.0.1"] = true}
            #    local ip = ngx.var.remote_addr
            #    if black_ips[ip] then
            #        ngx.exit(ngx.HTTP_FORBIDDEN)
            #    end
            #}
            content_by_lua_block {
                --返回一个包含四个元素的 Lua 表 (res.status, res.header, res.body, 和 res.truncated)。
                --res.header如果是“多值”响应头，这些值将使用 Lua (数组) 表顺序存储
                --{"a=3", "foo=bar", "baz=blah"}

                --res.body (体) 保存子请求的响应体数据，它可能被截断。用户需要检测 res.truncated (截断) 布尔值标记来判断 res.body 是否包含截断的数据。
                --这种数据截断的原因只可能是因为子请求发生了不可恢复的错误，例如远端在发送响应体时过早中断了连接，或子请求在接收远端响应体时超时
                --res = ngx.location.capture("/uri")

                --URI 请求串可以与 URI 本身连在一起
                -- res = ngx.location.capture('/foo/bar?a=3&b=4')
                --ngx.location.capture('/foo?a=1',
                --     { args = 'b=3&c=%3a' } }
                --)
                 --ngx.location.capture('/foo?a=1',
                 --    { args = { b = 3, c = ':' } }
                 --)

                --res = ngx.location.capture(
                --     '/foo/bar',
                --     { method = ngx.HTTP_POST, body = 'hello, world' }
                -- )

                --参数
                --method http方法，例如ngx.HTTP_POST
                --body 请求体 只能是string类型
                --args url参数 只能是string类型或者lua的table类型
                --ctx 子请求的上下文 lua的table类型
                --vars 子请求对变量 lua的table类型
                --copy_all_vars 是否将当前请求的变量复制到子请求，在子请求里修改变量不会影响当前请求的变量
                --share_all_vars 是否将当前请求的变量共享给子请求，在子请求里修改变量会影响当前请求的变量
                --always_forward_body 当该属性为true时，如果方法中没有定义body参数，会将当前请求中对body都发送给子请求.默认为false，并且put和post方法会发送body



                --请注意，通过 ngx.location.capture 创建的子请求默认继承当前请求的所有请求头信息，这有可能导致子请求响应中不可预测的副作用。
                --例如，当使用标准的 ngx_proxy 模块服务子请求时，如果主请求头中包含 "Accept-Encoding: gzip"，可能导致子请求返回 Lua 代码无法正确处理的 gzip 压缩过的结果。
                --通过设置 proxy_pass_request_headers 为 off ，在子请求 location 中忽略原始请求头

                --ngx.location.capture 和 ngx.location.capture_multi 指令无法抓取包含以下指令的 location： add_before_body, add_after_body,
                --auth_request, echo_location, echo_location_async, echo_subrequest, 或 echo_subrequest_async 。

            }
        }

        #curl localhost:6699/lua
        #/other dog: hello world
        #/lua: hello world
        location /other {
             set $dog "$dog world";
             echo "$uri dog: $dog";
         }

         location /lua {
             set $dog 'hello';
             content_by_lua '
                 res = ngx.location.capture("/other",
                     { share_all_vars = true });

                 ngx.print(res.body)
                 ngx.say(ngx.var.uri, ": ", ngx.var.dog)
             ';
         }

        #curl localhost:6699/lua2
        #/other2 dog: hello world
        #/lua2:hello
         location /other2 {
            set $dog "$dog world";
            echo "$uri dog: $dog";
         }

         location /lua2 {
            set $dog "hello";
            content_by_lua '
                res = ngx.location.capture("/other2",
                    {copy_all_vars = true});
                ngx.print(res.body)
                ngx.say(ngx.var.uri, ":", ngx.var.dog)
            ';
         }

        #curl localhost:6699/lua3
        #bar
        #nil
         location /sub {
            content_by_lua_block {
                ngx.ctx.foo = "bar"
            }
         }
         location /lua3 {
            content_by_lua_block {
                local ctx = {}
                res = ngx.location.capture("/sub", {ctx=ctx})
                ngx.say(ctx.foo)
                ngx.say(ngx.ctx.foo)
            }
         }

        #curl localhost:6699/lua4
        #bar
          location /lua4 {
             content_by_lua_block {
                 local ctx = {}
                 res = ngx.location.capture("/sub", {ctx=ngx.ctx})
                 ngx.say(ngx.ctx.foo)
             }
          }
    }
}